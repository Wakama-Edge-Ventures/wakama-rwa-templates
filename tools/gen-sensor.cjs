#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const N = parseInt(process.argv[2] || '60', 10);
const out = process.argv[3] || 'out/sensor-batch.json';

function randn() {
  let u = 0, v = 0;
  while (u === 0) u = Math.random();
  while (v === 0) v = Math.random();
  return Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);
}

function genSeries(kind, base, noise, bounds) {
  const now = Date.now();
  const points = [];
  for (let i = 0; i < N; i++) {
    let v = base + noise * randn();
    v = Math.max(bounds[0], Math.min(bounds[1], v));
    points.push({ t: now - (N - 1 - i) * 60_000, v: Number(v.toFixed(2)) });
  }
  return { kind, points };
}

const batch = {
  type: 'wakama.sensor.batch',
  version: 1,
  source: 'simulated',
  site: { country: 'CI', zone: 'raviart', field: 'bouake', device: 'esp32-001' },
  ts: new Date().toISOString(),
  readings: [
    genSeries('DHT22.tempC', 28.5, 0.3, [18, 45]),
    genSeries('DHT22.humidity', 62, 1.2, [15, 98]),
    genSeries('DS18B20.soilTempC', 24, 0.25, [10, 40]),
    genSeries('Soil.moisturePct', 38, 1.0, [5, 95])
  ],
  meta: { unitTime: 'ms since epoch', note: 'generated by tools/gen-sensor.cjs' }
};

fs.mkdirSync(path.dirname(out), { recursive: true });
fs.writeFileSync(out, JSON.stringify(batch, null, 2));
console.log('Wrote', out);
